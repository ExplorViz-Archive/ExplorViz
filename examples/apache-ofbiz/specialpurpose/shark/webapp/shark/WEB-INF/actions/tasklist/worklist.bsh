/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.shark.compare.*;
import org.ofbiz.shark.container.*;
import org.ofbiz.shark.requester.*;
import org.enhydra.shark.api.client.wfservice.*;
import org.enhydra.shark.api.client.wfmodel.*;

userLogin = session.getAttribute("userLogin");

// get the admin tools
admin = SharkContainer.getAdminInterface();
exMgr = admin.getExecutionAdministration();

if (userLogin == null) {
    request.setAttribute("_ERROR_MESSAGE_", "UserLogin object not found.");
    return;
}

// connect to the engine
exMgr.connect(userLogin.getString("userLoginId"), userLogin.getString("currentPassword"), null, null);


// handle accept/complete
if (request.getParameter("mode") != null) {
    String mode = request.getParameter("mode");
    String resource = request.getParameter("resource");
    String activity = request.getParameter("activity");
    String process = request.getParameter("process");

    try {
        assignment = exMgr.getAssignment(process, activity, resource);
        if (assignment != null) {
            if ("accept".equals(mode)) {
                acceptValue = request.getParameter("accept");
                if (acceptValue == null) acceptValue = "N";
                acceptMode = (acceptValue.equals("Y") ? true : false);
                assignment.set_accepted_status(acceptMode);
            } else if ("complete".equals(mode)) {
                act = assignment.activity();
                act.complete();
            }
        }
    } catch (Exception e) {
        request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    }
}

int[] sort = { 1, 2 };
assignments = new TreeSet(new FlexibleAssignmentComparator(sort, 0));
//assignments = new ArrayList();
res = exMgr.get_sequence_resource(0);
if (res != null) {
    for (int i = 0; i < res.length; i++) {
        assigns = res[i].get_sequence_work_item(0);
        if (assigns != null) {
            assignments.addAll(Arrays.asList(assigns));
        }
    }
}

context.put("assignments", assignments);

// disconnect from the engine
exMgr.disconnect();
