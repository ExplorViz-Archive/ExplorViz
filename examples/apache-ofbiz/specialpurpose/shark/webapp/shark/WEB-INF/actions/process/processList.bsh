/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.shark.container.*;
import org.ofbiz.shark.requester.*;
import org.enhydra.shark.api.client.wfservice.*;
import org.enhydra.shark.api.client.wfmodel.*;

userLogin = session.getAttribute("userLogin");

// get the admin tools
admin = SharkContainer.getAdminInterface();
exMgr = admin.getExecutionAdministration();

if (userLogin == null) {
    request.setAttribute("_ERROR_MESSAGE_", "UserLogin object not found.");
    return;
}

// connect to the engine
exMgr.connect(userLogin.getString("userLoginId"), userLogin.getString("currentPassword"), null, null);


// enabled state code
context.put("enabledCode", process_mgr_stateType._enabled);

// create a process
if (request.getParameter("create") != null) {
    mgrName = request.getParameter("create");
    try {
        mgr = exMgr.getProcessMgr(mgrName);
        if (mgr != null) {
            LoggingRequester req = new LoggingRequester(userLogin);
            WfProcess proc = mgr.create_process(req);
            req.addPerformer(proc);
            proc.start();
        }
    } catch (Exception e) {
        request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    }
}

if (request.getParameter("deleteFinished") != null) {
    try {
        exMgr.deleteClosedProcesses();
    } catch (Exception e) {
        request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    }
}

// disable the mgr
if (request.getParameter("disable") != null) {
    mgrName = request.getParameter("disable");
    try {
        mgr = exMgr.getProcessMgr(mgrName);
        if (mgr != null) {
            disabledType = process_mgr_stateType.from_int(process_mgr_stateType._disabled);
            mgr.set_process_mgr_state(disabledType);
        }
    } catch (Exception e) {
    e.printStackTrace();
        request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    }
}

// enable the mgr
if (request.getParameter("enable") != null) {
    mgrName = request.getParameter("enable");
    try {
        mgr = exMgr.getProcessMgr(mgrName);
        if (mgr != null) {
            enabledType = process_mgr_stateType.from_int(process_mgr_stateType._enabled);
            mgr.set_process_mgr_state(enabledType);
        }
    } catch (Exception e) {
        request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    }
}

// get the process managers
pi = exMgr.get_iterator_processmgr();
if (pi != null) {
try{
    mgrList = new ArrayList();
    size = pi.how_many();
    mgrs = pi.get_next_n_sequence(size);
    Debug.log("Mgrs : " + mgrs.length);
    context.put("processMgrs", Arrays.asList(mgrs));
//    throw new Exception();
    }catch(Exception e)
    {
        e.printStackTrace();
    }
}


// disconnect from the engine
exMgr.disconnect();
